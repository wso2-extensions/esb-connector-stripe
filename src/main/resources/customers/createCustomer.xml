<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="createCustomer" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="source" description="Token id of the card"/>
    <parameter name="accountBalance" description="Starting account balance for your customer"/>
    <parameter name="businessVatId" description="The customer’s VAT identification number"/>
    <parameter name="coupon" description="Discount amount to be applied to all recurring charges"/>
    <parameter name="description" description="Description of the customer"/>
    <parameter name="email" description="Email id of the customer"/>
    <parameter name="plan" description="The identifier of the plan to subscribe the customer to"/>
    <!--optional parameter for the parameter plan -->
    <parameter name="quantity" description="The quantity you’d like to apply to the subscription you’re creating"/>
    <parameter name="taxPercent"
               description="The percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount each billing period"/>
    <parameter name="trialEnd"
               description="Unix timestamp representing the end of the trial period the customer will get before being charged for the first time"/>
    <!--parameters for card library -->
    <parameter name="cardNumber" description="The card number, as a string without any separators"/>
    <parameter name="expMonth" description="Card's expiration month"/>
    <parameter name="expYear" description="Card's expiration year"/>
    <parameter name="cvc" description="Card security code"/>
    <parameter name="name" description="Cardholder's full name"/>
    <parameter name="addressLine1" description="Address line 1"/>
    <parameter name="addressLine2" description="Address line 2"/>
    <parameter name="city" description="City of the address"/>
    <parameter name="zip" description="Zip of the address"/>
    <parameter name="state" description="State of the address"/>
    <parameter name="country" description="Country of the address"/>
    <parameter name="currency" description="Currency type"/>
    <parameter name="defaultForCurrency"
               description="If you set this to true this card will become the default external account for its currency"/>
    <parameter name="metadata" description="A set of key/value pairs that you can attach to a customer object"/>
    <!--parameters for shipping -->
    <parameter name="shippingName" description="Recipient name"/>
    <parameter name="shippingPhone" description="Recipient phone"/>
    <parameter name="shippingAddressLine1" description="Shipping address address line 1"/>
    <parameter name="shippingAddressLine2" description="Shipping address address line 2"/>
    <parameter name="shippingAddressCity" description="city of the shipping address"/>
    <parameter name="shippingAddressState" description="state of the shipping address"/>
    <parameter name="shippingAddressPostalCode" description="postal code of the shipping address"/>
    <parameter name="shippingAddressCountry" description="country of the shipping address"/>
    <sequence>
        <property name="uri.var.source" expression="$func:source"/>
        <property name="uri.var.accountBalance" expression="$func:accountBalance"/>
        <property name="uri.var.businessVatId" expression="$func:businessVatId"/>
        <property name="uri.var.coupon" expression="$func:coupon"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.email" expression="$func:email"/>
        <property name="uri.var.plan" expression="$func:plan"/>
        <property name="uri.var.taxPercent" expression="$func:taxPercent"/>
        <property name="uri.var.trialEnd" expression="$func:trialEnd"/>
        <property name="uri.var.quantity" expression="$func:quantity"/>
        <property name="uri.var.cardNumber" expression="$func:cardNumber"/>
        <property name="uri.var.expMonth" expression="$func:expMonth"/>
        <property name="uri.var.expYear" expression="$func:expYear"/>
        <property name="uri.var.cvc" expression="$func:cvc"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.addressLine1" expression="$func:addressLine1"/>
        <property name="uri.var.addressLine2" expression="$func:addressLine2"/>
        <property name="uri.var.city" expression="$func:city"/>
        <property name="uri.var.zip" expression="$func:zip"/>
        <property name="uri.var.state" expression="$func:state"/>
        <property name="uri.var.country" expression="$func:country"/>
        <property name="uri.var.currency" expression="$func:currency"/>
        <property name="uri.var.defaultForCurrency" expression="$func:defaultForCurrency"/>
        <property name="uri.var.metadata" expression="$func:metadata"/>
        <property name="uri.var.shippingName" expression="$func:shippingName"/>
        <property name="uri.var.shippingPhone" expression="$func:shippingPhone"/>
        <property name="uri.var.shippingAddressLine1" expression="$func:shippingAddressLine1"/>
        <property name="uri.var.shippingAddressLine2" expression="$func:shippingAddressLine2"/>
        <property name="uri.var.shippingAddressCity" expression="$func:shippingAddressCity"/>
        <property name="uri.var.shippingAddressState" expression="$func:shippingAddressState"/>
        <property name="uri.var.shippingAddressPostalCode" expression="$func:shippingAddressPostalCode"/>
        <property name="uri.var.shippingAddressCountry" expression="$func:shippingAddressCountry"/>
        <payloadFactory media-type="json">
            <format>
                {
                }
            </format>
        </payloadFactory>
        <script language="js">
            <![CDATA[
                //request body param variables
                var source = mc.getProperty('uri.var.source');
                var cardNumber = mc.getProperty('uri.var.cardNumber');
                var expMonth = mc.getProperty('uri.var.expMonth');
                var expYear = mc.getProperty('uri.var.expYear');
                var cvc = mc.getProperty('uri.var.cvc');
                var name = mc.getProperty('uri.var.name');
                var addressLine1 = mc.getProperty('uri.var.addressLine1');
                var addressLine2 = mc.getProperty('uri.var.addressLine2');
                var city = mc.getProperty('uri.var.city');
                var zip = mc.getProperty('uri.var.zip');
                var state = mc.getProperty('uri.var.state');
                var country = mc.getProperty('uri.var.country');
                var currency = mc.getProperty('uri.var.currency');
                var defaultForCurrency = mc.getProperty('uri.var.defaultForCurrency');
                var accountBalance = mc.getProperty('uri.var.accountBalance');
                var businessVatId = mc.getProperty('uri.var.businessVatId');
                var coupon = mc.getProperty('uri.var.coupon');
                var description = mc.getProperty('uri.var.description');
                var email = mc.getProperty('uri.var.email');
                var plan = mc.getProperty('uri.var.plan');
                var quantity = mc.getProperty('uri.var.quantity');
                var taxPercent = mc.getProperty('uri.var.taxPercent');
                var trialEnd = mc.getProperty('uri.var.trialEnd');
                var metadata= mc.getProperty('uri.var.metadata');
                var shippingName = mc.getProperty('uri.var.shippingName');
                var shippingPhone = mc.getProperty('uri.var.shippingPhone');
                var shippingAddressLine1 = mc.getProperty('uri.var.shippingAddressLine1');
                var shippingAddressLine2 = mc.getProperty('uri.var.shippingAddressLine2');
                var shippingAddressCity = mc.getProperty('uri.var.shippingAddressCity');
                var shippingAddressState = mc.getProperty('uri.var.shippingAddressState');
                var shippingAddressPostalCode = mc.getProperty('uri.var.shippingAddressPostalCode');
                var shippingAddressCountry = mc.getProperty('uri.var.shippingAddressCountry');

                //Get the existing payload
                var payload = mc.getPayloadJSON();

                if (source != null && source != "") {
                    payload["source"]=source;
                }else{
                    payload["source[object]"]="card";

                    if (cardNumber != null && cardNumber != "") {
                        payload["source[number]"]=cardNumber;
                    }
                    if (expMonth != null && expMonth != "") {
                        payload["source[exp_month]"]=expMonth;
                    }
                    if (expYear != null && expYear != "") {
                        payload["source[exp_year]"] = expYear;
                    }
                    if (cvc != null && cvc != "") {
                        payload["source[cvc]"] = cvc;
                    }
                    if (name != null && name != "") {
                        payload["source[name]"] = name;
                    }
                    if (addressLine1 != null && addressLine1 != "") {
                        payload["source[address_line1]"] = addressLine1;
                    }
                    if (addressLine2 != null && addressLine2 != "") {
                        payload["source[address_line2]"] = addressLine2;
                    }
                    if (city != null && city != "") {
                        payload["source[address_city]"] = city;
                    }
                    if (zip != null && zip != "") {
                        payload["source[address_zip]"] = zip;
                    }
                    if (state != null && state != "") {
                        payload["source[address_state]"] = state;
                    }
                    if (country != null && country != "") {
                        payload["source[address_country]"] = country;
                    }
                    if (currency != null && currency != "") {
                        payload["source[currency]"] = currency;
                    }
                    if (defaultForCurrency != null && defaultForCurrency != "") {
                        payload["source[default_for_currency]"] = defaultForCurrency;
                    }
                }
                if (coupon != null && coupon != "") {
                    payload["coupon"] = coupon;
                }
                if (description != null && description != "") {
                    payload["description"] = description;
                }
                if (email != null && email != "") {
                    payload["email"] = email;
                }
                if (accountBalance != null && accountBalance != "") {
                    payload["account_balance"] = accountBalance;
                }
                if (businessVatId != null && businessVatId != "") {
                    payload["business_vat_id"] = businessVatId;
                }
                if (plan != null && plan != "") {
                    payload["plan"] = plan;
                    if (quantity != null && quantity != "") {
                        payload["quantity"] = quantity;
                    }
                    if (trialEnd != null && trialEnd != "") {
                        payload["trial_end"] = trialEnd;
                    }
                    if (taxPercent != null && taxPercent != "") {
                       payload["tax_percent"] = taxPercent;
                    }
                }
                if (metadata != null && metadata != "") {
                    var obj = eval ("(" + metadata + ")");
                    for(var key in obj){
                        payload["metadata["+key+"]"]=obj[key];
                    }
                }
                if (shippingName != null && shippingName != "") {
                    payload["shipping[name]"]=shippingName;
                }
                if (shippingPhone != null && shippingPhone != "") {
                   payload["shipping[phone]"]=shippingPhone;
                }
                if (shippingAddressLine1 != null && shippingAddressLine1 != "") {
                   payload["shipping[address[line1]]"] = shippingAddressLine1;
                }
                if (shippingAddressLine2 != null && shippingAddressLine2 != "") {
                   payload["shipping[address[line2]]"] = shippingAddressLine2;
                }
                if (shippingAddressCity != null && shippingAddressCity != "") {
                   payload["shipping[address[city]]"] = shippingAddressCity;
                }
                if (shippingAddressState != null && shippingAddressState != "") {
                   payload["shipping[address[state]]"] = shippingAddressState;
                }
                if (shippingAddressPostalCode != null && shippingAddressPostalCode != "") {
                   payload["shipping[address[postal_code]]"] = shippingAddressPostalCode;
                }
                if (shippingAddressCountry != null && shippingAddressCountry != "") {
                   payload["shipping[address[country]]"] = shippingAddressCountry;
                }
                //Set the newly constructed payload
                mc.setPayloadJSON(payload);
            ]]>
        </script>
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <property name="FORCE_POST_PUT_NOBODY" value="true" scope="axis2" type="BOOLEAN"/>
        <filter source="$ctx:STRIPE_BLOCKING" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="post"
                              uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/customers"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="post"
                              uri-template="{uri.var.apiUrl}/{uri.var.apiVersion}/customers"/>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>